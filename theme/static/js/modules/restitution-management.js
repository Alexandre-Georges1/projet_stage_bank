/**
 * Module de gestion des restitutions de PC
 * G√®re les formulaires de restitution et les interactions utilisateur
 */

class RestitutionManager {
    constructor() {
        this.restituerForm = null;
        this.confirmerCheckbox = null;
        this.submitButton = null;
        this.motifSelect = null;
        this.autreMotifGroup = null;
        
        this.init();
    }

    /**
     * Initialise le gestionnaire de restitution
     */
    init() {
        console.log('üöÄ Initialisation du RestitutionManager...');
        
        // V√©rifier si le DOM est d√©j√† charg√©
        if (document.readyState === 'loading') {
            console.log('üìÑ DOM en cours de chargement, attente...');
            document.addEventListener('DOMContentLoaded', () => {
                console.log('üìÑ DOM charg√©, initialisation des √©l√©ments...');
                this.initElements();
                this.performInitialization();
            });
        } else {
            console.log('üìÑ DOM d√©j√† charg√©, initialisation imm√©diate...');
            this.initElements();
            this.performInitialization();
        }
    }

    /**
     * Effectue l'initialisation apr√®s que les √©l√©ments soient pr√™ts
     */
    performInitialization() {
        // V√©rifier que tous les √©l√©ments sont pr√©sents
        if (this.checkRequiredElements()) {
            this.setupEventListeners();
            console.log('‚úÖ RestitutionManager initialis√© avec succ√®s');
        } else {
            console.error('‚ùå RestitutionManager: √âchec de l\'initialisation - √©l√©ments manquants');
            console.log('üîÑ Retry dans 1 seconde...');
            
            // Retry apr√®s 1 seconde au cas o√π les √©l√©ments ne seraient pas encore disponibles
            setTimeout(() => {
                console.log('üîÑ Tentative de r√©initialisation...');
                this.initElements();
                if (this.checkRequiredElements()) {
                    this.setupEventListeners();
                    console.log('‚úÖ RestitutionManager initialis√© avec succ√®s (retry)');
                } else {
                    console.error('‚ùå RestitutionManager: √âchec d√©finitif de l\'initialisation');
                }
            }, 1000);
        }
    }

    /**
     * Initialise les √©l√©ments DOM
     */
    initElements() {
        console.log('üîç Recherche des √©l√©ments DOM...');
        
        this.restituerForm = document.getElementById('restituerPcForm');
        console.log('üìù Formulaire:', this.restituerForm ? '‚úÖ Trouv√©' : '‚ùå Non trouv√©');
        
        this.confirmerCheckbox = document.getElementById('confirmerRestitution');
        console.log('‚òëÔ∏è Checkbox:', this.confirmerCheckbox ? '‚úÖ Trouv√©e' : '‚ùå Non trouv√©e');
        
        this.submitButton = document.querySelector('.btn-restituer');
        console.log('üîò Bouton:', this.submitButton ? '‚úÖ Trouv√©' : '‚ùå Non trouv√©');
        
        this.motifSelect = document.getElementById('restituerMotif');
        console.log('üìã Select motif:', this.motifSelect ? '‚úÖ Trouv√©' : '‚ùå Non trouv√©');
        
        this.autreMotifGroup = document.getElementById('autreMotifGroup');
        console.log('üìù Groupe autre motif:', this.autreMotifGroup ? '‚úÖ Trouv√©' : '‚ùå Non trouv√©');
    }

    /**
     * Configure les √©couteurs d'√©v√©nements
     */
    setupEventListeners() {
        this.setupConfirmationCheckbox();
        this.setupMotifSelection();
        this.setupFormSubmission();
    }

    /**
     * G√®re l'activation/d√©sactivation du bouton selon la checkbox
     */
    setupConfirmationCheckbox() {
        if (this.confirmerCheckbox && this.submitButton) {
            this.confirmerCheckbox.addEventListener('change', () => {
                this.submitButton.disabled = !this.confirmerCheckbox.checked;
            });
        }
    }

    /**
     * G√®re l'affichage conditionnel du champ "Autre motif"
     */
    setupMotifSelection() {
        if (this.motifSelect && this.autreMotifGroup) {
            this.motifSelect.addEventListener('change', () => {
                if (this.motifSelect.value === 'Autre') {
                    this.autreMotifGroup.style.display = 'block';
                } else {
                    this.autreMotifGroup.style.display = 'none';
                }
            });
        }
    }

    /**
     * G√®re la soumission du formulaire de restitution
     */
    setupFormSubmission() {
        if (this.restituerForm) {
            this.restituerForm.addEventListener('submit', (e) => {
                e.preventDefault();
                this.handleFormSubmit();
            });
        }
    }

    /**
     * Traite la soumission du formulaire
     */
    async handleFormSubmit() {
        try {
            console.log('üì§ D√©but de la soumission du formulaire...');
            
            // V√©rifier l'URL
            if (!window.restituerPcUrl) {
                console.error('‚ùå URL restituerPcUrl non d√©finie');
                this.showError('Configuration manquante: URL de restitution non d√©finie.');
                return;
            }
            console.log('üåê URL de restitution:', window.restituerPcUrl);
            
            // Validation c√¥t√© client
            if (!this.validateForm()) {
                console.log('‚ùå Validation du formulaire √©chou√©e');
                return;
            }
            console.log('‚úÖ Validation du formulaire r√©ussie');

            // Debug : afficher les donn√©es du formulaire
            this.debugFormData();

            // Pr√©paration des donn√©es
            const formData = new FormData(this.restituerForm);
            
            // Si le motif n'est pas "Autre", supprimer le champ autre_motif
            const motif = formData.get('motif');
            if (motif !== 'Autre') {
                formData.delete('autre_motif');
                console.log('üóëÔ∏è Champ autre_motif supprim√© car motif =', motif);
            }
        
            this.showLoadingState(true);

            // Envoi de la requ√™te
            const response = await fetch(window.restituerPcUrl, {
                method: 'POST',
                body: formData,
                headers: {
                    'X-CSRFToken': this.getCSRFToken()
                }
            });

            const data = await response.json();

            // Traitement de la r√©ponse
            this.handleResponse(data, response.ok);

        } catch (error) {
            this.showError('Une erreur est survenue lors de l\'envoi de la demande.');
        } finally {
            this.showLoadingState(false);
        }
    }

    /**
     * Valide le formulaire c√¥t√© client
     */
    validateForm() {
        const requiredFields = [
            { element: this.motifSelect, message: 'Veuillez s√©lectionner un motif de restitution.' },
            { element: document.getElementById('dateRestitution'), message: 'Veuillez s√©lectionner une date de restitution.' },
            { element: this.confirmerCheckbox, message: 'Veuillez confirmer la restitution.' }
        ];

        for (const field of requiredFields) {
            if (!field.element || !field.element.value || (field.element.type === 'checkbox' && !field.element.checked)) {
                this.showError(field.message);
                field.element?.focus();
                return false;
            }
        }

        // Validation sp√©ciale pour "Autre motif"
        if (this.motifSelect.value === 'Autre') {
            const autreMotif = document.getElementById('autreMotif');
            if (!autreMotif || !autreMotif.value.trim()) {
                this.showError('Veuillez pr√©ciser le motif de restitution.');
                autreMotif?.focus();
                return false;
            }
        }

        return true;
    }

    /**
     * Traite la r√©ponse du serveur
     */
    handleResponse(data, isSuccess) {
        if (isSuccess && data.message) {
            this.showSuccess(data.message);
            this.resetForm();
            
            // D√©lai avant rechargement pour que l'utilisateur voie le message
            setTimeout(() => {
                // Optionnel : rediriger vers une page sp√©cifique ou recharger
                if (confirm('Demande de restitution envoy√©e avec succ√®s ! Souhaitez-vous recharger la page ?')) {
                    location.reload();
                }
            }, 2000);
        } else if (data.error) {
            this.showError(data.error);
        } else {
            this.showError('Une erreur inattendue est survenue.');
        }
    }

    /**
     * Affiche un message de succ√®s
     */
    showSuccess(message) {
        this.showNotification(message, 'success');
    }

    /**
     * Affiche un message d'erreur
     */
    showError(message) {
        this.showNotification(message, 'error');
    }

    /**
     * Affiche une notification
     */
    showNotification(message, type = 'info') {
        // Cr√©er ou r√©utiliser un conteneur de notification
        let notificationContainer = document.getElementById('restitution-notification-container');
        
        if (!notificationContainer) {
            notificationContainer = document.createElement('div');
            notificationContainer.id = 'restitution-notification-container';
            notificationContainer.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                z-index: 10000;
                max-width: 400px;
            `;
            document.body.appendChild(notificationContainer);
        }
        
        // Cr√©er la notification
        const notification = document.createElement('div');
        notification.style.cssText = `
            padding: 15px 20px;
            margin-bottom: 10px;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            font-family: Arial, sans-serif;
            font-size: 14px;
            line-height: 1.4;
            animation: slideIn 0.3s ease-out;
            border-left: 4px solid;
            background: white;
        `;
        
        // D√©finir les couleurs selon le type
        const styles = {
            success: {
                borderColor: '#28a745',
                backgroundColor: '#d4edda',
                color: '#155724',
                icon: '‚úÖ'
            },
            error: {
                borderColor: '#dc3545',
                backgroundColor: '#f8d7da',
                color: '#721c24',
                icon: '‚ùå'
            },
            info: {
                borderColor: '#17a2b8',
                backgroundColor: '#d1ecf1',
                color: '#0c5460',
                icon: '‚ÑπÔ∏è'
            }
        };
        
        const style = styles[type] || styles.info;
        notification.style.borderLeftColor = style.borderColor;
        notification.style.backgroundColor = style.backgroundColor;
        notification.style.color = style.color;
        
        notification.innerHTML = `
            <div style="display: flex; align-items: center; gap: 10px;">
                <span style="font-size: 16px;">${style.icon}</span>
                <span>${message}</span>
                <button onclick="this.parentElement.parentElement.remove()" 
                        style="margin-left: auto; background: none; border: none; font-size: 18px; 
                               cursor: pointer; color: ${style.color}; opacity: 0.7;">&times;</button>
            </div>
        `;
        
        // Ajouter les styles d'animation si ce n'est pas d√©j√† fait
        if (!document.getElementById('restitution-notification-styles')) {
            const styleSheet = document.createElement('style');
            styleSheet.id = 'restitution-notification-styles';
            styleSheet.textContent = `
                @keyframes slideIn {
                    from { transform: translateX(100%); opacity: 0; }
                    to { transform: translateX(0); opacity: 1; }
                }
                @keyframes slideOut {
                    from { transform: translateX(0); opacity: 1; }
                    to { transform: translateX(100%); opacity: 0; }
                }
            `;
            document.head.appendChild(styleSheet);
        }
        
        // Ajouter la notification
        notificationContainer.appendChild(notification);
        
        // Auto-suppression apr√®s 5 secondes pour les succ√®s, 8 secondes pour les erreurs
        const autoRemoveDelay = type === 'success' ? 5000 : 8000;
        setTimeout(() => {
            if (notification.parentElement) {
                notification.style.animation = 'slideOut 0.3s ease-in';
                setTimeout(() => {
                    if (notification.parentElement) {
                        notification.remove();
                    }
                }, 300);
            }
        }, autoRemoveDelay);
    }

    /**
     * G√®re l'√©tat de chargement
     */
    showLoadingState(isLoading) {
        if (this.submitButton) {
            if (isLoading) {
                // Sauvegarder le texte original
                this.submitButton.dataset.originalText = this.submitButton.innerHTML;
                
                // Afficher l'indicateur de chargement
                this.submitButton.disabled = true;
                this.submitButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Envoi en cours...';
                this.submitButton.style.opacity = '0.7';
                this.submitButton.style.cursor = 'not-allowed';
                
                // Ajouter une classe pour le style
                this.submitButton.classList.add('loading');
            } else {
                // Restaurer l'√©tat original
                this.submitButton.innerHTML = this.submitButton.dataset.originalText || '<i class="fas fa-undo"></i> Restituer le PC';
                this.submitButton.style.opacity = '1';
                this.submitButton.style.cursor = 'pointer';
                
                // R√©activer seulement si la checkbox est coch√©e
                this.submitButton.disabled = !this.confirmerCheckbox?.checked;
                
                // Retirer la classe de chargement
                this.submitButton.classList.remove('loading');
            }
        }
    }

    /**
     * R√©initialise le formulaire apr√®s succ√®s
     */
    resetForm() {
        if (this.restituerForm) {
            this.restituerForm.reset();
            this.submitButton.disabled = true;
            
            // Masquer le champ "Autre motif" si affich√©
            if (this.autreMotifGroup) {
                this.autreMotifGroup.style.display = 'none';
            }
        }
    }

    /**
     * R√©cup√®re le token CSRF
     */
    getCSRFToken() {
        const csrfElement = document.querySelector('[name=csrfmiddlewaretoken]');
        return csrfElement ? csrfElement.value : '';
    }

    /**
     * M√©thode de d√©bogage pour afficher les donn√©es du formulaire
     */
    debugFormData() {
        if (this.restituerForm) {
            const formData = new FormData(this.restituerForm);
            const debugData = {};
            
            for (let [key, value] of formData.entries()) {
                debugData[key] = value;
            }
            
            console.log('üîç Donn√©es du formulaire de restitution:', debugData);
            console.log('üåê URL de destination:', window.restituerPcUrl);
            console.log('üîë Token CSRF:', this.getCSRFToken() ? 'Pr√©sent' : 'Manquant');
        }
    }

    /**
     * V√©rifie si tous les √©l√©ments requis sont pr√©sents
     */
    checkRequiredElements() {
        const elements = {
            'Formulaire': this.restituerForm,
            'Checkbox de confirmation': this.confirmerCheckbox,
            'Bouton de soumission': this.submitButton,
            'S√©lecteur de motif': this.motifSelect,
            'Groupe autre motif': this.autreMotifGroup
        };

        let allPresent = true;
        
        console.log('üîç V√©rification des √©l√©ments requis:');
        for (const [name, element] of Object.entries(elements)) {
            const isPresent = element !== null;
            console.log(`  ${isPresent ? '‚úÖ' : '‚ùå'} ${name}: ${isPresent ? 'Pr√©sent' : 'Manquant'}`);
            if (!isPresent) allPresent = false;
        }

        if (!allPresent) {
            console.warn('‚ö†Ô∏è Certains √©l√©ments requis sont manquants dans le DOM');
        }

        return allPresent;
    }
}

// Initialisation automatique du gestionnaire de restitution
window.restitutionManager = new RestitutionManager();

// Export pour utilisation en module ES6 si n√©cessaire
if (typeof module !== 'undefined' && module.exports) {
    module.exports = RestitutionManager;
}
